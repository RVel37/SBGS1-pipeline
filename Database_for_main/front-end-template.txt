here’s what we’ll need to do in stages:

	1.	Set Up the Backend API (Flask)
	•	This will handle interactions with the MySQL database.
	•	It will expose REST API endpoints that the frontend can use to display data and upload files.
	2.	Set Up the Frontend (React)
	•	This will be the user interface that will interact with the backend to display and manipulate the data.
	3.	Connect the Frontend with the Backend
	•	Once the API is up and running, the frontend will fetch data from it and display it on the web pages.
	4.	Deploy the Application
	•	Once both parts are complete, you can deploy them on a platform like Heroku, AWS, or another suitable cloud hosting service.

Phase 1: Setting up the Backend API (Flask)

I’ll guide you through creating the Flask API that will interact with your MySQL database.

Step 1: Install Dependencies

	1.	Install Python and set up a virtual environment:

python3 -m venv venv
source venv/bin/activate


	2.	Install Flask and MySQL Connector:

pip install Flask mysql-connector-python


	3.	Install other necessary libraries:

pip install Flask-CORS



Step 2: Create the Flask Application

Here’s how you can structure your Flask application:

	•	app.py: The main file to run the API.
	•	database.py: A helper file to manage database connections.

Create the app.py file:

from flask import Flask, jsonify, request
from database import get_db_connection
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # Enable CORS to allow frontend access

@app.route('/')
def home():
    return "Welcome to the Bioinformatics Database API"

# Get all runs
@app.route('/api/runs', methods=['GET'])
def get_runs():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM runs")
    runs = cursor.fetchall()
    cursor.close()
    conn.close()

    return jsonify(runs)

# Get details of a specific run
@app.route('/api/runs/<int:run_id>', methods=['GET'])
def get_run_details(run_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT * FROM runs
        WHERE run_id = %s
    """, (run_id,))
    run = cursor.fetchone()
    cursor.close()
    conn.close()

    return jsonify(run)

# Insert a new run
@app.route('/api/runs', methods=['POST'])
def insert_run():
    run_data = request.json
    run_folder_name = run_data['run_folder_name']

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO runs (run_folder_name)
        VALUES (%s)
    """, (run_folder_name,))
    conn.commit()
    cursor.close()
    conn.close()

    return jsonify({'message': 'Run inserted successfully'}), 201

if __name__ == "__main__":
    app.run(debug=True)

Create the database.py file:

import mysql.connector

def get_db_connection():
    db_config = {
        'user': 'root',
        'password': 'my-secret-pw',
        'host': 'localhost',
        'port': 3306,
        'database': 'bioinformatics_db'
    }
    conn = mysql.connector.connect(**db_config)
    return conn

Step 3: Run the Flask API

You can run the Flask app using the following command:

export FLASK_APP=app.py
flask run

This will start a local server at http://127.0.0.1:5000, and your API will be accessible from there.

Phase 2: Setting up the Frontend (React)

Next, let’s set up the frontend using React. This will interact with the Flask backend through API calls.

Step 1: Install React and Create a New Project

	1.	Install Node.js and npm (if not installed).
	2.	Create a new React project:

npx create-react-app bioinformatics-frontend
cd bioinformatics-frontend



Step 2: Create Components

You’ll create a few React components to display data:

	•	components/RunList.js: Lists all the runs.
	•	components/RunDetails.js: Displays details of a specific run, including VCF files and variants.

RunList.js

import React, { useState, useEffect } from 'react';

function RunList() {
  const [runs, setRuns] = useState([]);

  useEffect(() => {
    fetch('http://localhost:5000/api/runs')
      .then(response => response.json())
      .then(data => setRuns(data))
      .catch(error => console.error('Error fetching runs:', error));
  }, []);

  return (
    <div>
      <h1>Bioinformatics Runs</h1>
      <ul>
        {runs.map(run => (
          <li key={run.run_id}>{run.run_folder_name}</li>
        ))}
      </ul>
    </div>
  );
}

export default RunList;

App.js (Main File)

import React from 'react';
import './App.css';
import RunList from './components/RunList';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Bioinformatics Dashboard</h1>
        <RunList />
      </header>
    </div>
  );
}

export default App;

Step 3: Run the React App

To run the frontend, use:

npm start

This will open http://localhost:3000, and you should see your list of runs displayed.

Phase 3: Connecting Frontend and Backend

Now that you have both the backend API (Flask) and the frontend (React) set up, you can connect them by making API calls from React to Flask.

	1.	Frontend API Calls: Use fetch() in React to make requests to your Flask backend, like in the RunList.js example above.
	2.	Cross-Origin Resource Sharing (CORS): Make sure that you have enabled CORS in your Flask app using the Flask-CORS package, so that the frontend (on localhost:3000) can talk to the backend (on localhost:5000).

Phase 4: Deployment

To deploy the app, you have a few options:

	•	Heroku: Deploy both your React frontend and Flask backend on Heroku.
	•	AWS (EC2 and S3): Host the Flask backend on an EC2 instance and the frontend on an S3 bucket.
	•	Vercel (for frontend) and Heroku (for backend).

This is the basic structure of the project, and you can extend it with more features (such as uploading files, viewing MultiQC reports, and displaying VCF variants). 
